name: release

on:
  push:
    branches:
      - 'main'

env:
  slack-channel: 'status-ci-cd'

jobs:
  build:

    if: contains(toJson(github.event.commits), '[skip ci]') == false

    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack Started
        uses: voxmedia/github-action-slack-notify-build@v1
        id: slack
        with:
          channel: ${{ env.slack-channel }}
          status: RELEASE STARTED
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/dependency-check-data
          key: ${{ runner.os }}-gradle-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up Gradle
        run: chmod +x gradlew

      - name: Build
        run: ./gradlew build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sonar
        run: |
          export BRANCH_NAME=$(git branch --show-current)
          ./gradlew sonarqube -Dsonar.login=${{ secrets.SONAR_LOGIN }} -Dsonar.branch.name=${BRANCH_NAME} --info

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
        run: |
          ./gradlew release

      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: reports
          path: build/reports

      - name: Notify Slack Success
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: ${{ env.slack-channel }}
          status: RELEASE SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Slack Failed
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: ${{ env.slack-channel }}
          status: RELEASE FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
